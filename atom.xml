<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ZX&#39;Blog</title>
  
  <subtitle>记录学习与生活</subtitle>
  <link href="https://zxxiao.github.io/atom.xml" rel="self"/>
  
  <link href="https://zxxiao.github.io/"/>
  <updated>2022-03-25T03:44:12.918Z</updated>
  <id>https://zxxiao.github.io/</id>
  
  <author>
    <name>zxxxiao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【数据结构与算法】最小堆的实现</title>
    <link href="https://zxxiao.github.io/2022/03/25/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E3%80%91%E3%80%90js%E3%80%91%E6%9C%80%E5%B0%8F%E5%A0%86%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>https://zxxiao.github.io/2022/03/25/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E3%80%91%E3%80%90js%E3%80%91%E6%9C%80%E5%B0%8F%E5%A0%86%E7%9A%84%E5%AE%9E%E7%8E%B0/</id>
    <published>2022-03-25T02:28:00.000Z</published>
    <updated>2022-03-25T03:44:12.918Z</updated>
    
    <content type="html"><![CDATA[<p><strong>堆</strong>：堆是一种特殊的完全二叉树。</p><p><strong>最大堆</strong>：所有节点都大于等于它的子节点。</p><p><strong>最小堆</strong>：所有节点都小于等于它的子节点。</p><p><strong>js中的堆</strong>:</p><ul><li>通常用数组表示</li><li>左侧节点的位置是 2 * index + 1</li><li>右侧节点的位置是 2 * index + 2</li><li>父节点的位置是 (index - 1) / 2</li></ul><p><strong>堆的应用</strong>：堆能高效、快速的找出最大值和最小值。</p><p><strong>js实现最小堆</strong>：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//包括插入元素、删除堆顶元素、获取堆的大小、获取堆顶元素</span></span><br><span class="line"><span class="comment">//建一个最小堆类，具体实现方法如下</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinHeap</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>()&#123;</span><br><span class="line"><span class="keyword">this</span>.heap = [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取父节点下标</span></span><br><span class="line">getParentIndex(i)&#123;</span><br><span class="line"><span class="comment">//return Math.floor((i - 1) / 2);</span></span><br><span class="line"><span class="keyword">return</span> (i-<span class="number">1</span>) &gt;&gt; <span class="number">1</span>; <span class="comment">//二进制操作，向右移一位</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取左节点下标</span></span><br><span class="line">getLeftIndex(i)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span> * i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取右节点下标</span></span><br><span class="line">getRightIndex(i)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span> * i + <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//交换节点</span></span><br><span class="line">swap(i1, i2)&#123;</span><br><span class="line"><span class="keyword">const</span> temp = <span class="keyword">this</span>.heap[i1];</span><br><span class="line"><span class="keyword">this</span>.heap[i1] = <span class="keyword">this</span>.heap[i2];</span><br><span class="line"><span class="keyword">this</span>.heap[i2] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//下移操作</span></span><br><span class="line">shiftDown(i)&#123;</span><br><span class="line"><span class="keyword">const</span> left = <span class="keyword">this</span>.getLeftIndex(i); <span class="comment">//获取左孩子下标</span></span><br><span class="line"><span class="keyword">const</span> right = <span class="keyword">this</span>.getRightIndex(i); <span class="comment">//获取右孩子下标</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.heap[i] &gt; <span class="keyword">this</span>.heap[left])&#123;</span><br><span class="line"><span class="keyword">this</span>.swap(i, left);</span><br><span class="line"><span class="keyword">this</span>.shiftDown(left);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.heap[i] &gt; <span class="keyword">this</span>.heap[right])&#123;</span><br><span class="line"><span class="keyword">this</span>.swap(i, right);</span><br><span class="line"><span class="keyword">this</span>.shiftDown(right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//上移操作</span></span><br><span class="line">shiftUp(i)&#123;</span><br><span class="line"><span class="comment">//到达堆顶</span></span><br><span class="line"><span class="keyword">if</span>(i === <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//比较当前元素和其父节点的大小</span></span><br><span class="line"><span class="keyword">const</span> parentIndex = <span class="keyword">this</span>.getParentIndex(i);</span><br><span class="line"><span class="comment">//如果当前元素小于其父节点，交换</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.heap[i] &lt; <span class="keyword">this</span>.heap[parentIndex])&#123;</span><br><span class="line"><span class="keyword">this</span>.swap(i, parentIndex);</span><br><span class="line"><span class="keyword">this</span>.shiftUp(parentIndex); <span class="comment">//递归调用shiftUp</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入元素</span></span><br><span class="line">insert(value)&#123;</span><br><span class="line"><span class="comment">//思路：为保证堆的结构，必须在末尾添加元素，然后进行上移操作</span></span><br><span class="line"><span class="keyword">this</span>.heap.push(value); <span class="comment">//利用数组的push方法，在heap的末尾添加元素</span></span><br><span class="line"><span class="keyword">this</span>.shiftUp(<span class="keyword">this</span>.heap.length - <span class="number">1</span>);  <span class="comment">//调用上移操作方法，传入当前元素下标</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除堆顶元素</span></span><br><span class="line">pop()&#123;</span><br><span class="line"><span class="comment">//思路：直接删除堆顶元素会破坏堆的结构，可以用最后一个元素替换掉堆顶元素，然后进行下移操作</span></span><br><span class="line"><span class="keyword">this</span>.heap[<span class="number">0</span>] = <span class="keyword">this</span>.heap.pop(); <span class="comment">//利用数组的pop方法，返回数组中最后一个元素并删除；用最后一个元素替换掉堆顶元素</span></span><br><span class="line"><span class="keyword">this</span>.shiftDown(<span class="number">0</span>); <span class="comment">//调用下移操作方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取堆的大小</span></span><br><span class="line">getSize()&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.heap.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取堆顶元素</span></span><br><span class="line">peek()&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.heap[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="comment">// const h = new MinHeap();</span></span><br><span class="line"><span class="comment">// h.insert(3);</span></span><br><span class="line"><span class="comment">// h.insert(2);</span></span><br><span class="line"><span class="comment">// h.insert(1);</span></span><br><span class="line"><span class="comment">// h.peek();</span></span><br><span class="line"><span class="comment">// h.pop();</span></span><br><span class="line"><span class="comment">// h.getSize();</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;堆&lt;/strong&gt;：堆是一种特殊的完全二叉树。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最大堆&lt;/strong&gt;：所有节点都大于等于它的子节点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最小堆&lt;/strong&gt;：所有节点都小于等于它的子节点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;j</summary>
      
    
    
    
    <category term="学习" scheme="https://zxxiao.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="前端" scheme="https://zxxiao.github.io/categories/%E5%AD%A6%E4%B9%A0/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="数据结构与算法" scheme="https://zxxiao.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    <category term="js" scheme="https://zxxiao.github.io/tags/js/"/>
    
    <category term="堆" scheme="https://zxxiao.github.io/tags/%E5%A0%86/"/>
    
  </entry>
  
  <entry>
    <title>我的第一篇博文</title>
    <link href="https://zxxiao.github.io/2022/03/24/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E6%96%87/"/>
    <id>https://zxxiao.github.io/2022/03/24/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E6%96%87/</id>
    <published>2022-03-24T14:33:11.000Z</published>
    <updated>2022-03-24T14:39:03.799Z</updated>
    
    <content type="html"><![CDATA[<h2 id="这是我的第一篇博文"><a href="#这是我的第一篇博文" class="headerlink" title="这是我的第一篇博文"></a>这是我的第一篇博文</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;这是我的第一篇博文&quot;&gt;&lt;a href=&quot;#这是我的第一篇博文&quot; class=&quot;headerlink&quot; title=&quot;这是我的第一篇博文&quot;&gt;&lt;/a&gt;这是我的第一篇博文&lt;/h2&gt;</summary>
      
    
    
    
    <category term="随笔" scheme="https://zxxiao.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="读书" scheme="https://zxxiao.github.io/tags/%E8%AF%BB%E4%B9%A6/"/>
    
    <category term="随笔" scheme="https://zxxiao.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://zxxiao.github.io/2022/03/24/hello-world/"/>
    <id>https://zxxiao.github.io/2022/03/24/hello-world/</id>
    <published>2022-03-24T03:23:33.029Z</published>
    <updated>2022-03-24T03:17:18.563Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
